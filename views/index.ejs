<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="initial-scale=1.0,user-scalable=no,maximum-scale=1,width=device-width">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Nanum+Gothic:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/stylesheets/top.css">
    <link rel="stylesheet" href="/stylesheets/main.css">
    <script src="http://code.jquery.com/jquery-1.9.1.js"></script>
    <script src="/javascripts/jquery-ui.min.js"></script>
    <title>주식</title>
    <script src="/javascripts/lr.js"></script>
    <style>
        .dn {
            display: none !important;
        }
        .df {
            display: flex !important;
        }
        .db {
            display: block !important;
        }
        .h200 {
            height: 200px;
            position: relative;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .orientleft {
            transform: rotate(-90deg);
            transform-origin:160px 160px;
        }

        .orientright {
            transform: rotate(90deg);
            transform-origin:230px 230px;
        } 

        * {
            overflow-x: hidden;
            box-sizing: border-box;
        }
        body {
            padding: 0;
            margin: 0;
            width: 100vw;
            background-color: #000;
            position: relative;
            overflow: hidden;
        }

        .foot {
            width: 100%;
            height: 50px;
            background-color: #1c1c1d;
            display: flex;
            align-items: center;
            padding-left: 15px;
            position: fixed;
            bottom: 0;
            z-index: 40;
            border-top: 1px solid #2d2d2e;
        }
        .foot img {
            height: 50%;
            width: auto;
        }

        .bottom {
            position: absolute;
            top: 0;
            transform: translateY(100%);
            width: 100%;
            height: 100vh;
            background-color: #1c1c1d;
            border-radius: 13px;
            z-index: 15;
        }
        .bottom.on {
            transition: transform 0.4s ease;
            transform: translateY(72px) !important;
        }
        .bottom.off {
            transition: transform 0.4s ease;
            transform: translateY(100%) !important;
        }
        #bottom_close_button {
            background-color: #313135;
            width: 28px;
            height: 28px;
            border-radius: 50%;
            position: absolute;
            top: 10px;
            right: 10px;
            color: #94949b;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .on_bottom_top {
            float: left;
            width: 100000px;
            height: 72px;
            overflow: hidden;
            margin: 0;
            font-family: 'Nanum Gothic', sans-serif;
            display: flex;
            opacity: 0;
            box-sizing: border-box;
            position: absolute;
            align-items: center;
        }
        @keyframes bottom_top_on {
            0% { opacity: 0; }
            100% { opacity: 1; }
        }
        @keyframes bottom_top_off {
            0% { opacity: 1; }
            100% { opacity: 0; }
        }
        .on_bottom_top.odf {
            animation: bottom_top_on 0.4s forwards;
        }
        .on_bottom_top.odn {
            animation: bottom_top_off 0.4s forwards;
        }
        .on_bottom_top > div {
            width: auto;
            height: 80%;
            display: flex;
            align-items: center;
            position: absolute;
        }
        .on_bottom_top .bottom_top_left {
            height: 100%;
            margin-right: 7px;
            font-size: 16px;
            display: flex;
            flex-direction: column;
            justify-content: space-around;
        }
        .btl_main_name, .btl_market_price {
            font-weight: bold;
            color: white;
        }
        .on_bottom_top .bottom_top_right {
            width: 60px;
            height: 100%;
            display: flex;
            align-items: center;
        }

        .bottom_main_name {
            width: 100%;
            height: 60px;
            padding: 15px 15px 0 15px;
            box-sizing: border-box;
        }
        .bottom_main_name > div {
            width: 100%;
            height: 100%;
            border-bottom: 1px solid #2b2b2d;
            display: flex;
            align-items: flex-end;
            padding-bottom: 13px;
        }
        .bottom_main_name .main_name {
            color: #ddf5e2;
            font-size: 20px;
            font-weight: bold;
            margin-right: 11px;
        }
        .bottom_main_name .long_name {
            font-size: 13.5px;
            color: #8b8b8f;
        }

        .bottom_price_change {
            width: 100%;
            border-bottom: 1px solid #2b2b2d;
            display: flex;
            align-items: center;
            padding: 8px 0  8px 15px;
            /* box-sizing: border-box; */
        }

        .bottom_price_change .bottom_market_price {
            color: #ddf5e2;
            font-size: 18px;
            font-weight: bold;
            display: inline-block;
            margin-right: 17px;
        }
        .bottom_price_change .bottom_market_change {
            font-size: 15px;
        }
        .bottom_price_change .bottom_market_change.price_green {
            color: #35c759;
        }
        .bottom_price_change .bottom_market_change.price_red {
            color: #ff3a30;
        }

        .bottom_graph {
            width: 100%;
            height: 300px;
            position: relative;
            overflow-y: hidden;
        }
        .bottom_graph .loader {
            position: absolute;
            border: 5px solid #2e2e2e;
            border-top: 5px solid #636363;
            transform: translate(-50%, -50%);
            top: calc(50% - 15px);
            left: calc(50% - 15px);
        }

        .bottom .switcher {
            display: flex;
            align-items: center;
            height: 30px;
            margin-top: 8px;
            color: #2196F3;
            width: 400px;
            overflow-x: auto;
        }

        .bottom .switcher-item {
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
            padding: 6px 6px;
            font-size: 14px;
            color: #262b3e;
            background-color: transparent;
            margin-right: 8px;
            border: none;
            border-radius: 4px;
            outline: none;
        }

        .bottom .switcher-item:hover {
            background-color: #f2f3f5;
        }

        .bottom .switcher-active-item {
            text-decoration: none;
            cursor: default;
            color: #262b3e;
        }

        .bottom .switcher-active-item,
        .bottom .switcher-active-item:hover {
            background-color: #e1eff9;
        }

    </style>
</head>
<body>
    <div class="on_bottom_top"></div>

    <div class="top">
        <div class="explain">
            <span style="font-size: 24px; color: white; display:block; margin: 0;font-weight: bold;">주식</span>
            <span id="today_date"><%= today_date %></span>
        </div>
        <div class="mainsearchb">
            <div class="searchb">
                <div class="sch">
                    <i class="material-icons" style="margin-right: 5px; font-size: 19px;width:20px;">search</i>
                    <form action="/" onsubmit="form_search(event);">
                        <input autocomplete="off" type="search" name="search" id="finance_search" placeholder="검색">
                    </form>
                    <div class="xb"><i class="material-icons" style="font-size:10px;">clear</i></div>
                </div>
            </div>
            <div id="search_cancel">취소</div>
        </div>
    </div>

    <div class="main h200">
        <div class="main_blind"></div>
        <div class="loader"></div>
        </div>
    </div>

    <div class="bottom">
        <div id="bottom_close_button"><i class="material-icons" style="font-weight: bold; font-size: 17px;">clear</i></div>
        <div class="bottom_main_name">
            <div>
                <div class="main_name">SK하이닉스</div>
                <div class="long_name">SK hynix</div>
            </div>
        </div>
        
        <div class="bottom_price_change">
            <div class="bottom_market_price">7,600.00</div>
            <div class="bottom_market_change green price_green">+4,000</div>
        </div>

        <div class="bottom_graph">
        </div>
    </div>

    <div class="foot">
        <img src="/images/yahoo_finance.png" alt="">
    </div>

    <script src="/javascripts/update.js"></script>
    <script src="/javascripts/search.js"></script>
    <script src="/javascripts/lightweight-charts.standalone.production.js"></script>
    <script src="/javascripts/start_finance_info.js"></script>
    <script src="http://code.jquery.com/jquery-latest.js"></script>
    <script>
        var bannerLeft=0;
        var first=1;
        var last;
        var imgCnt=0;
        var $img;
        var $first;
        var $last;
        function bottom_top_roll() {
            $img.each(function(){
                $(this).css("left", $(this).position().left-1); // 1px씩 왼쪽으로 이동
            });
            $first = $("#banner"+first);
            $last = $("#banner"+last);
            if($first.position().left < -200) {    // 제일 앞에 배너 제일 뒤로 옮김
                $first.css("left", $last.position().left + $last.width()+130 );
                first++;
                last++;
                if(last > imgCnt) { last=1; }   
                if(first > imgCnt) { first=1; }
            }
        }

        let roll_s;
        window.onload = (e) => {
            get_finance_info();
        }
        document.body.addEventListener("scroll touchmove mousewhell", (event) => {
            event.preventDefault();
            event.stopPropagation();
            return false;
        });
        s_top.addEventListener("scroll touchmove mousewhell", (event) => {
            event.preventDefault();
            event.stopPropagation();
            return false;
        });

        let botto = document.querySelector(".bottom");
        let on_bottom_top = document.querySelector(".on_bottom_top");

        function bottom_on(dv) {
            roll_s = setInterval(bottom_top_roll, 70);
            top_explain.classList.remove("exdn");
            top_explain.classList.remove("exdb");
            top_explain.classList.add("exdn");
            searchb.classList.remove("exdn");
            searchb.classList.remove("exdb");
            searchb.classList.add("exdn");
            botto.classList.remove("on");
            botto.classList.remove("off");
            botto.classList.add("on");
            on_bottom_top.classList.remove("odn");
            on_bottom_top.classList.remove("odf");
            on_bottom_top.classList.add("odf");
            let color = dv.childNodes[2].childNodes[1].classList[1].split('_')[1];
            bottom_graph_set(dv.className.replace('___', '.').substring(2), color);
        }

        function bottom_down() {
            if(roll_s) clearInterval(roll_s);
            top_explain.classList.remove("exdn");
            top_explain.classList.remove("exdb");
            top_explain.classList.add("exdb");
            searchb.classList.remove("exdn");
            searchb.classList.remove("exdb");
            searchb.classList.add("exdb");
            botto.classList.remove("on");
            botto.classList.remove("off");
            botto.classList.add("off");
            on_bottom_top.classList.remove("odn");
            on_bottom_top.classList.remove("odf");
            on_bottom_top.classList.add("odn");
        }

        function bottom_fast(fName, color) {
            let bottom_graph = document.querySelector(".bottom_graph");
            let xhr = new XMLHttpRequest();
            xhr.open('POST', `/chart/bottom/fast/${fName}`);
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.onreadystatechange = () => {
                if(xhr.status == 200 && xhr.readyState === 4) {
                    let data = JSON.parse(xhr.responseText);
                    while(bottom_graph.hasChildNodes()) {
                        bottom_graph.removeChild(bottom_graph.firstChild);
                    }
                    function createSimpleSwitcher(items, activeItem, activeItemChangedCallback) {
                        var switcherElement = document.createElement('div');
                        switcherElement.classList.add('switcher');

                        var intervalElements = items.map(function(item) {
                            var itemEl = document.createElement('button');
                            itemEl.innerText = item;
                            itemEl.classList.add('switcher-item');
                            itemEl.classList.toggle('switcher-active-item', item === activeItem);
                            itemEl.addEventListener('click', function() {
                                onItemClicked(item);
                            });
                            switcherElement.appendChild(itemEl);
                            return itemEl;
                        });

                        function onItemClicked(item) {
                            if (item === activeItem) {
                                return;
                            }

                            intervalElements.forEach(function(element, index) {
                                element.classList.toggle('switcher-active-item', items[index] === item);
                            });

                            activeItem = item;

                            activeItemChangedCallback(item);
                        }

                        return switcherElement;
                    }

                    var intervals = ['1일', '5일', '1달', '3달', '6달', '1년', '2년', '5년', '10년'];

                    let _1dayData = [];
                    for(let j in data.data[intervals[0]][0].timestamp) {
                        if(!data.data[intervals[0]][0].indicators.quote[0].close[j]) continue;
                        _1dayData.push({ 'time': data.data[intervals[0]][0].timestamp[j], 'value': Number(data.data[intervals[0]][0].indicators.quote[0].close[j].toFixed(2)) });
                    }

                    let _5dayData = [];
                    let _1monthData = [];
                    let _3monthData = [];
                    let _6monthData = [];
                    let _1yearData = [];
                    let _2yearData = [];
                    let _5yearData = [];
                    let _10yearData = [];

                    var seriesesData = new Map([
                        ['1일', _1dayData ],
                        ['5일', _5dayData ],
                        ['1달', _1monthData ],
                        ['3달', _3monthData ],
                        ['6달', _6monthData ],
                        ['1년', _1yearData ],
                        ['2년', _2yearData ],
                        ['5년', _5yearData ],
                        ['10년', _10yearData ],
                    ]);

                    var switcherElement = createSimpleSwitcher(intervals, intervals[0], syncToInterval);

                    var chartElement = document.createElement('div');

                    var chart = LightweightCharts.createChart(chartElement, {
                        width: screen.width,
                        height: 250,
                        layout: {
                            backgroundColor: '#1c1c1d',
                            textColor: '#d1d4dc',
                        },
                        grid: {
                            vertLines: {
                                visible: false,
                            },
                            horzLines: {
                                color: 'rgba(42, 46, 57, 0.5)',
                            },
                        },
                        rightPriceScale: {
                            borderVisible: false,
                        },
                        timeScale: {
                            borderVisible: false,
                        },
                        crosshair: {
                            horzLine: {
                                visible: false,
                            },
                        },
                    });

                    bottom_graph.appendChild(switcherElement);
                    bottom_graph.appendChild(chartElement);

                    var areaSeries = null;

                    function syncToInterval(interval) {
                        if (areaSeries) {
                            chart.removeSeries(areaSeries);
                            areaSeries = null;
                        }
                        if(color == 'green') {
                            areaSeries = chart.addAreaSeries({
                            topColor: 'rgba(76, 175, 80, 0.56)',
                            bottomColor: 'rgba(76, 175, 80, 0.04)',
                            lineColor: 'rgba(76, 175, 80, 1)',
                            lineWidth: 2,
                            });
                        } else {
                            areaSeries = chart.addAreaSeries({
                            topColor: 'rgba(237 , 56, 46, 0.5)',
                            lineColor: 'rgba(237 , 56, 46, 1)',
                            bottomColor: 'rgba(237 , 56, 46, 0)',
                            lineWidth: 2,
                            });
                        }
                        areaSeries.setData(seriesesData.get(interval));
                    }

                    syncToInterval(intervals[0]);
                }
            }
            xhr.send()
        }

        function bottom_graph_set(fName, color) {
            let bottom_graph = document.querySelector('.bottom_graph');
            while(bottom_graph.hasChildNodes()) {
                bottom_graph.removeChild(bottom_graph.firstChild);
            }
            let loader = document.createElement("div");
            loader.classList.add("loader");
            bottom_graph.appendChild(loader);
            bottom_fast(fName, color);
            let xhr = new XMLHttpRequest();
            xhr.open('POST', `/chart/bottom/${fName}`);
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.onreadystatechange = () => {
                if(xhr.status === 200 && xhr.readyState === 4) {
                    let data = JSON.parse(xhr.responseText);
                    while(bottom_graph.hasChildNodes()) {
                        bottom_graph.removeChild(bottom_graph.firstChild);
                    }
                    function createSimpleSwitcher(items, activeItem, activeItemChangedCallback) {
                        var switcherElement = document.createElement('div');
                        switcherElement.classList.add('switcher');

                        var intervalElements = items.map(function(item) {
                            var itemEl = document.createElement('button');
                            itemEl.innerText = item;
                            itemEl.classList.add('switcher-item');
                            itemEl.classList.toggle('switcher-active-item', item === activeItem);
                            itemEl.addEventListener('click', function() {
                                onItemClicked(item);
                            });
                            switcherElement.appendChild(itemEl);
                            return itemEl;
                        });

                        function onItemClicked(item) {
                            if (item === activeItem) {
                                return;
                            }

                            intervalElements.forEach(function(element, index) {
                                element.classList.toggle('switcher-active-item', items[index] === item);
                            });

                            activeItem = item;

                            activeItemChangedCallback(item);
                        }

                        return switcherElement;
                    }

                    var intervals = ['1일', '5일', '1달', '3달', '6달', '1년', '2년', '5년', '10년'];

                    let _1dayData = [];
                    for(let j in data.data[intervals[0]][0].timestamp) {
                        if(!data.data[intervals[0]][0].indicators.quote[0].close[j]) continue;
                        _1dayData.push({ 'time': data.data[intervals[0]][0].timestamp[j], 'value': Number(data.data[intervals[0]][0].indicators.quote[0].close[j].toFixed(2)) });
                    }

                    let _5dayData = [];
                    for(let j in data.data[intervals[1]][0].timestamp) {
                        if(!data.data[intervals[1]][0].indicators.quote[0].close[j]) continue;
                        _5dayData.push({ 'time': data.data[intervals[1]][0].timestamp[j], 'value': Number(data.data[intervals[1]][0].indicators.quote[0].close[j].toFixed(2)) });
                    }

                    let _1monthData = [];
                    for(let j in data.data[intervals[2]][0].timestamp) {
                        if(!data.data[intervals[2]][0].indicators.quote[0].close[j]) continue;
                        _1monthData.push({ 'time': data.data[intervals[2]][0].timestamp[j], 'value': Number(data.data[intervals[2]][0].indicators.quote[0].close[j].toFixed(2)) });
                    }

                    let _3monthData = [];
                    for(let j in data.data[intervals[3]][0].timestamp) {
                        if(!data.data[intervals[3]][0].indicators.quote[0].close[j]) continue;
                        _3monthData.push({ 'time': data.data[intervals[3]][0].timestamp[j], 'value': Number(data.data[intervals[3]][0].indicators.quote[0].close[j].toFixed(2)) });
                    }

                    let _6monthData = [];
                    for(let j in data.data[intervals[4]][0].timestamp) {
                        if(!data.data[intervals[4]][0].indicators.quote[0].close[j]) continue;
                        _6monthData.push({ 'time': data.data[intervals[4]][0].timestamp[j], 'value': Number(data.data[intervals[4]][0].indicators.quote[0].close[j].toFixed(2)) });
                    }

                    let _1yearData = [];
                    for(let j in data.data[intervals[5]][0].timestamp) {
                        if(!data.data[intervals[5]][0].indicators.quote[0].close[j]) continue;
                        _1yearData.push({ 'time': data.data[intervals[5]][0].timestamp[j], 'value': Number(data.data[intervals[5]][0].indicators.quote[0].close[j].toFixed(2)) });
                    }

                    let _2yearData = [];
                    for(let j in data.data[intervals[6]][0].timestamp) {
                        if(!data.data[intervals[6]][0].indicators.quote[0].close[j]) continue;
                        _5dayData.push({ 'time': data.data[intervals[6]][0].timestamp[j], 'value': Number(data.data[intervals[6]][0].indicators.quote[0].close[j].toFixed(2)) });
                    }

                    let _5yearData = [];
                    for(let j in data.data[intervals[7]][0].timestamp) {
                        if(!data.data[intervals[7]][0].indicators.quote[0].close[j]) continue;
                        _5dayData.push({ 'time': data.data[intervals[7]][0].timestamp[j], 'value': Number(data.data[intervals[7]][0].indicators.quote[0].close[j].toFixed(2)) });
                    }

                    let _10yearData = [];
                    for(let j in data.data[intervals[8]][0].timestamp) {
                        if(!data.data[intervals[8]][0].indicators.quote[0].close[j]) continue;
                        _10yearData.push({ 'time': data.data[intervals[8]][0].timestamp[j], 'value': Number(data.data[intervals[8]][0].indicators.quote[0].close[j].toFixed(2)) });
                    }

                    var seriesesData = new Map([
                        ['1일', _1dayData ],
                        ['5일', _5dayData ],
                        ['1달', _1monthData ],
                        ['3달', _3monthData ],
                        ['6달', _6monthData ],
                        ['1년', _1yearData ],
                        ['2년', _2yearData ],
                        ['5년', _5yearData ],
                        ['10년', _10yearData ],
                    ]);

                    var switcherElement = createSimpleSwitcher(intervals, intervals[0], syncToInterval);

                    var chartElement = document.createElement('div');

                    var chart = LightweightCharts.createChart(chartElement, {
                        width: screen.width,
                        height: 250,
                        layout: {
                            backgroundColor: '#1c1c1d',
                            textColor: '#d1d4dc',
                        },
                        grid: {
                            vertLines: {
                                visible: false,
                            },
                            horzLines: {
                                color: 'rgba(42, 46, 57, 0.5)',
                            },
                        },
                        rightPriceScale: {
                            borderVisible: false,
                        },
                        timeScale: {
                            borderVisible: false,
                        },
                        crosshair: {
                            horzLine: {
                                visible: false,
                            },
                        },
                    });

                    bottom_graph.appendChild(switcherElement);
                    bottom_graph.appendChild(chartElement);

                    var areaSeries = null;

                    function syncToInterval(interval) {
                        if (areaSeries) {
                            chart.removeSeries(areaSeries);
                            areaSeries = null;
                        }
                        if(color == 'green') {
                            areaSeries = chart.addAreaSeries({
                            topColor: 'rgba(76, 175, 80, 0.56)',
                            bottomColor: 'rgba(76, 175, 80, 0.04)',
                            lineColor: 'rgba(76, 175, 80, 1)',
                            lineWidth: 2,
                            });
                        } else {
                            areaSeries = chart.addAreaSeries({
                            topColor: 'rgba(237 , 56, 46, 0.5)',
                            lineColor: 'rgba(237 , 56, 46, 1)',
                            bottomColor: 'rgba(237 , 56, 46, 0)',
                            lineWidth: 2,
                            });
                        }
                        areaSeries.setData(seriesesData.get(interval));
                    }

                    syncToInterval(intervals[0]);
                }
            }
            xhr.send();
        }
        
        let startY, endY;
        let y1, y2;
        let cancel_status = false;
        botto.addEventListener("touchstart", (e) => {
            if(!cancel_status) {
                e.preventDefault();
                startY = e.changedTouches[0].screenY;
                y1 = e.changedTouches[0].pageY;
                botto.classList.remove("on");
                botto.style.transform = "translateY(72px)";
            }
        });
        botto.addEventListener("touchmove", (e) => {
            if(!cancel_status) {
                if(y1 - e.changedTouches[0].pageY > 0) {
                    e.preventDefault();
                } else {
                    y2 = y1 - e.changedTouches[0].pageY;
                    botto.style.transform = `translateY(${72 - y2}px)`;
                }
            }
        });
        botto.addEventListener("touchend", (e) => {
            if(!cancel_status) {
                endY = e.changedTouches[0].screenY;
                if((endY - startY) < 75) {
                    botto.classList.add("on");
                    botto.style.transform = "translateY(72px)";
                } else bottom_down();
            }
        });

        let bottom_close_button = document.getElementById("bottom_close_button");
        bottom_close_button.addEventListener("touchstart", (e) => {
            cancel_status = true;
            e.stopPropagation();
        });
        bottom_close_button.addEventListener("touchend", (e) => {
            cancel_status = false;
            bottom_down();
            e.stopPropagation();
        });

        function roll_start(finances_length) {
            $img = $(".on_bottom_top > div");

            $img.each(function(){   // 5px 간격으로 배너 처음 위치 시킴
                $(this).css("left",bannerLeft);
                bannerLeft += $(this).width()+30;
                $(this).attr("id", "banner"+(++imgCnt));  // img에 id 속성 추가
            });

            if(imgCnt > finances_length-1) {
                last = imgCnt;
            }
        }
    </script>
</body>
</html>